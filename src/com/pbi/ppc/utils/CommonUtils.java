/* * File Name:  CommonUtils.java * Copyright:  Beijing Jaeger Communication Electronic Technology Co., Ltd. Copyright YYYY-YYYY,  All rights reserved * Descriptions:  <Descriptions> * Changed By:   * Changed Time:  2014-1-16 * Changed Content:  <Changed Content> */package com.pbi.ppc.utils;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.xmlpull.v1.XmlPullParser;import android.content.Context;import android.os.Environment;import android.os.Handler;import android.util.Log;import android.util.Xml;import com.pbi.ppc.domain.VersionBean;/** * <Functional overview> <Functional Details> *  * @author * @version [Version Number, 2014-1-16] * @see [Relevant Class/Method] * @since [Product/Module Version] */public class CommonUtils{    private static final String TAG = "CommonUtils";        public static VersionBean parserXml(InputStream is)    {        XmlPullParser parser = Xml.newPullParser();        try        {            parser.setInput(is, "utf-8");            VersionBean bean = new VersionBean();            int type = parser.getEventType();            while (type != XmlPullParser.END_DOCUMENT)            {                switch (type)                {                    case XmlPullParser.START_TAG:                        if ("version".equalsIgnoreCase(parser.getName()))                        {                        }                        else if ("name".equals(parser.getName()))                        {                            String name = parser.nextText();                            bean.setVersionName(name);                        }                        else if ("path".equals(parser.getName()))                        {                            String path = parser.nextText();                            bean.setApkPath(path);                        }                        break;                    case XmlPullParser.END_TAG:                        if ("version".equals(parser.getName()))                        {                        }                }                type = parser.next();            }            return bean;        }        catch (Exception e)        {            e.printStackTrace();        }        return null;    }        public static File downLoadFile(String filePath, String storagePath)    {        File file = null;        String fileName = filePath.substring(filePath.lastIndexOf("/") + 1);        Log.i(TAG, "--->>> file name is: " + fileName);        file = new File(storagePath, fileName);        URL url;        try        {            url = new URL(filePath);            HttpURLConnection conn = (HttpURLConnection)url.openConnection();            conn.setConnectTimeout(5000);            int fileLength = conn.getContentLength();            Log.i(TAG, "--->>> apk file length is: " + fileLength);            if (conn.getResponseCode() >= 200 && conn.getResponseCode() < 300)            {                InputStream is = conn.getInputStream();                                FileOutputStream out = new FileOutputStream(file);                int len = 0;                int progress = 0;                byte[] b = new byte[1024];                while ((len = is.read(b)) != -1)                {                    out.write(b, 0, len);                    Log.i(TAG, "--->>> download progress is: " + progress);                }                out.flush();                out.close();                is.close();            }        }        catch (MalformedURLException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }        return file;    }        public static File downLoadFile(final Context context, final Handler handler, final String filePath)    {        File file = null;        final String fileName = filePath.substring(filePath.lastIndexOf("/") + 1);        Log.i(TAG, "--->>> file path is: " + filePath);        Log.i(TAG, "--->>> file name is: " + fileName);        new Thread()        {            public void run()            {                HttpClient client = new DefaultHttpClient();                HttpGet get = new HttpGet(filePath);                HttpResponse response;                try                {                    response = client.execute(get);                    HttpEntity entity = response.getEntity();                    long length = entity.getContentLength();                    InputStream is = entity.getContent();                    FileOutputStream fileOutputStream = null;                    if (is != null)                    {                        File file = new File(Environment.getExternalStorageDirectory(), fileName);                        fileOutputStream = new FileOutputStream(file);                        byte[] b = new byte[1024];                        int charb = -1;                        int count = 0;                        while ((charb = is.read(b)) != -1)                        {                            fileOutputStream.write(b, 0, charb);                            count += charb;                            Log.i(TAG, "--->>> progress is: " + count);                        }                    }                    fileOutputStream.flush();                    if (fileOutputStream != null)                    {                        fileOutputStream.close();                    }                }                catch (Exception e)                {                    // TODO Auto-generated catch block                    e.printStackTrace();                }            };        }.start();        return file;    }        public static void setPPCRequest(String path)    {        try        {            URL url = new URL(path);            HttpURLConnection conn = (HttpURLConnection)url.openConnection();            conn.setRequestMethod("GET");            conn.setReadTimeout(1000);            if (conn.getResponseCode() == 200)            {                Log.i(TAG, "--->>> send request to ppc success!");            }        }        catch (MalformedURLException e)        {            e.printStackTrace();        }        catch (IOException e)        {            e.printStackTrace();        }    }}